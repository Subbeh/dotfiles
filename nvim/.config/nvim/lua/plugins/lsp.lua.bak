return {
  "VonHeikemen/lsp-zero.nvim",
  lazy = false,
  branch = "v2.x",
  dependencies = {
    { "neovim/nvim-lspconfig" }, -- Required
    { "nvim-lua/plenary.nvim" },
    { "williamboman/mason.nvim" },
    { "williamboman/mason-lspconfig.nvim" },
    { "b0o/schemastore.nvim" },

    -- Autocompletion
    {
      "L3MON4D3/LuaSnip",
      build = "make install_jsregexp",
      event = "InsertEnter",
      dependencies = {
        "saadparwaiz1/cmp_luasnip",
        "rafamadriz/friendly-snippets",
        "kawre/neotab.nvim",
      },
    },                          -- Required
    { 'hrsh7th/nvim-cmp' },     -- Required TODO: check old config
    { "hrsh7th/cmp-nvim-lsp" }, -- Required
    { "hrsh7th/cmp-nvim-lsp-signature-help" },
    { "hrsh7th/cmp-buffer" },
    { "hrsh7th/cmp-nvim-lua" },
    { "hrsh7th/cmp-path" },
    { "hrsh7th/cmp-cmdline" },
    { "saadparwaiz1/cmp_luasnip" },
    { "rafamadriz/friendly-snippets" },
    { "onsails/lspkind.nvim" },
    { "brenoprata10/nvim-highlight-colors" },

    -- None-ls
    { "nvimtools/none-ls.nvim" },
    { "nvimtools/none-ls-extras.nvim" },
    { "jay-babu/mason-null-ls.nvim" },
    { "williamboman/mason.nvim" },
    { "lewis6991/gitsigns.nvim" },
  },

  keys = {
    { "<leader>M", "<cmd>Mason<cr>", desc = "Mason" },
  },

  config = function()
    local lsp = require("lsp-zero")
    local icons = require("config.icons")

    lsp.on_attach(function(client, bufnr)
      local opts = { buffer = bufnr, remap = false }

      -- Enable formatting capabilities
      lsp.buffer_autoformat()

      -- Ensure the client has formatting capabilities
      client.server_capabilities.documentFormattingProvider = true

      vim.keymap.set("i", "<C-h>", function() vim.lsp.buf.signature_help() end,
        vim.tbl_deep_extend("force", opts, { desc = "LSP Signature Help" }))
      vim.keymap.set({ "n", "v" }, "<leader>cc", function() vim.lsp.buf.code_action() end,
        vim.tbl_deep_extend("force", opts, { desc = "LSP Code Action" }))
      vim.keymap.set("n", "<leader>cd", function() vim.diagnostic.setloclist() end,
        vim.tbl_deep_extend("force", opts, { desc = "LSP Show Diagnostics" }))
      vim.keymap.set("n", "<leader>cR", function() vim.lsp.buf.rename() end,
        vim.tbl_deep_extend("force", opts, { desc = "LSP Rename" }))
      vim.keymap.set("n", "<leader>cs", function() vim.lsp.buf.workspace_symbol() end,
        vim.tbl_deep_extend("force", opts, { desc = "LSP Workspace Symbol" }))
      vim.keymap.set("n", "K", function() vim.lsp.buf.hover() end,
        vim.tbl_deep_extend("force", opts, { desc = "LSP Hover" }))
      vim.keymap.set("n", "[d", function() vim.diagnostic.goto_next() end,
        vim.tbl_deep_extend("force", opts, { desc = "Next Diagnostic" }))
      vim.keymap.set("n", "]d", function() vim.diagnostic.goto_prev() end,
        vim.tbl_deep_extend("force", opts, { desc = "Previous Diagnostic" }))
      vim.keymap.set("n", "gd", function() vim.lsp.buf.definition() end,
        vim.tbl_deep_extend("force", opts, { desc = "LSP Goto Definition" }))
      vim.keymap.set("n", "gr", function() vim.lsp.buf.references() end,
        vim.tbl_deep_extend("force", opts, { desc = "LSP Goto Reference" }))
      vim.keymap.set("n", "gD", function() vim.lsp.buf.declaration() end,
        vim.tbl_deep_extend("force", opts, { desc = "LSP Goto Declaration" }))
      vim.keymap.set("n", "gi", function() vim.lsp.buf.implementation() end,
        vim.tbl_deep_extend("force", opts, { desc = "LSP Implementation" }))
      vim.keymap.set("n", "go", function() vim.lsp.buf.type_definition() end,
        vim.tbl_deep_extend("force", opts, { desc = "LSP Type Definition" }))
      vim.keymap.set("n", "<leader>ch", function() vim.lsp.buf.signature_help() end,
        vim.tbl_deep_extend("force", opts, { desc = "LSP Signature Help" }))
      vim.keymap.set({ "n", "x" }, "<leader>cf", function() vim.lsp.buf.format({ async = true }) end,
        vim.tbl_deep_extend("force", opts, { desc = "LSP Format" }))
    end)

    local servers = {
      "ansiblels",
      "bashls",
      "cssls",
      "dockerls",
      "eslint",
      "gopls",
      "helm_ls",
      "html",
      "jsonls",
      "lua_ls",
      "marksman",
      "pyright",
      "terraformls",
      "tflint",
      "yamlls",
    }

    lsp.extend_lspconfig({
      capabilities = require("cmp_nvim_lsp").default_capabilities(),
      sign_text = {
        error = icons.diagnostics.Error,
        warn = icons.diagnostics.Warning,
        hint = icons.diagnostics.Hint,
        info = icons.diagnostics.Information,
      },
      settings = {
        -- Default settings for all language servers
        ["*"] = {
          completion = {
            enable = true,
            triggerCharacters = { ".", ":", "(", "'", '"', "[", ",", "#" },
          },
          hoverProvider = true,
          documentFormattingProvider = true,
          codeActionProvider = true,
        },
      },
    })

    require("mason").setup({})
    require("mason-lspconfig").setup({
      ensure_installed = servers,
      handlers = {
        function(server_name)
          local config_file = vim.fn.stdpath("config") .. "/lua/plugins/lspconfig/" .. server_name .. ".lua"
          if vim.fn.filereadable(config_file) == 1 then
            require("plugins/lspconfig/" .. server_name)
          else
            require("lspconfig")[server_name].setup({})
          end
        end,
      },
    })

    -- require("luasnip.loaders.from_vscode").lazy_load()
    require("luasnip.loaders.from_lua").load({ paths = vim.fn.stdpath("config") .. "/lua/plugins/snippets/" })
    require("nvim-highlight-colors").setup({
      enable_named_colors = false,
    })

    local cmp = require("cmp")
    local luasnip = require("luasnip")
    local lspkind = require("lspkind")

    local check_backspace = function()
      local col = vim.fn.col(".") - 1
      return col == 0 or vim.fn.getline("."):sub(col, col):match("%s")
    end

    cmp.setup({
      sources = {
        {
          name = "nvim_lsp",
          entry_filter = function(entry, ctx)
            local kind = require("cmp.types.lsp").CompletionItemKind[entry:get_kind()]

            if ctx.prev_context.filetype == "markdown" then
              return true
            end

            if kind == "Text" then
              return false
            end

            return true
          end,
        },
        { name = "luasnip" },
        { name = "nvim_lua" },
        { name = "buffer" },
        { name = "path" },
        { name = "treesitter" },
        { name = "crates" },
      },
      formatting = {
        format = function(entry, item)
          local color_item = require("nvim-highlight-colors").format(entry, { kind = item.kind })
          item = lspkind.cmp_format({
            -- any lspkind format settings here
          })(entry, item)
          if color_item.abbr_hl_group then
            item.kind_hl_group = color_item.abbr_hl_group
            item.kind = color_item.abbr
          end
          return item
        end,
      },
      experimental = { ghost_text = true },
      snippet = {
        expand = function(args)
          require("luasnip").lsp_expand(args.body)
        end,
      },
      confirm_opts = {
        behavior = cmp.ConfirmBehavior.Replace,
        select = false,
      },
      view = {
        entries = {
          name = "custom",
          selection_order = "top_down",
        },
        docs = {
          auto_open = true,
        },
      },
      mapping = {
        ["<Up>"] = cmp.mapping.select_prev_item(),
        ["<Down>"] = cmp.mapping.select_next_item(),
        ["C-h"] = function()
          if cmp.visible_docs() then
            cmp.close_docs()
          else
            cmp.open_docs()
          end
        end,
        ["<C-b>"] = cmp.mapping.scroll_docs(-4),
        ["<C-f>"] = cmp.mapping.scroll_docs(4),
        ["<C-Space>"] = cmp.mapping(cmp.mapping.complete(), { "i", "c" }),
        ["<C-e>"] = cmp.mapping({
          i = cmp.mapping.abort(),
          c = cmp.mapping.close(),
        }),
        ["<CR>"] = cmp.mapping.confirm({ select = true }),
        ["<Tab>"] = cmp.mapping(function()
          if cmp.visible() then
            cmp.select_next_item()
          elseif luasnip.expandable() then
            luasnip.expand()
          elseif luasnip.expand_or_jumpable() then
            luasnip.expand_or_jump()
          elseif check_backspace() then
            require("neotab").tabout()
          else
            require("neotab").tabout()
          end
        end, {
          "i",
          "s",
        }),
        ["<S-Tab>"] = cmp.mapping(function(fallback)
          if cmp.visible() then
            cmp.select_prev_item()
          elseif luasnip.jumpable(-1) then
            luasnip.jump(-1)
          else
            fallback()
          end
        end, {
          "i",
          "s",
        }),
      },
    })

    require("mason-null-ls").setup({
      ensure_installed = {
        "ansiblelint",
        -- "black",
        "delve",
        "gofumpt",
        "goimports",
        "goimports-reviser",
        "golines",
        "htmlhint",
        "jsonlint",
        "markdownlint",
        -- "prettierd",
        "prettier",
        -- "pylint",
        -- "pyright",
        "ruff",
        "shellcheck",
        "shellharden",
        "shfmt",
        "stylua",
        "yamlfmt",
        "yamllint",
      },
    })

    local null_ls = require("null-ls")
    local formatting = null_ls.builtins.formatting
    local diagnostics = null_ls.builtins.diagnostics
    local completion = null_ls.builtins.completion
    local code_actions = null_ls.builtins.code_actions
    local hover = null_ls.builtins.hover


    local augroup = vim.api.nvim_create_augroup("LspFormatting", {})

    null_ls.setup({
      debug = true,
      sources = {
        code_actions.gomodifytags,
        completion.luasnip,
        completion.tags,

        diagnostics.ansiblelint,
        diagnostics.golangci_lint,
        diagnostics.tidy, -- html
        -- diagnostics.markdownlint,

        -- Only run yamllint on pure yaml files, not ansible
        diagnostics.yamllint.with({
          extra_args = { "-d", "{extends: default, rules: {line-length: disable, new-line-at-end-of-file: disable}}" },
          filetypes = { "yaml" },
          runtime_condition = function(params)
            return params.ft == "yaml" and not string.match(params.bufname or "", "ansible")
          end,
        }),

        -- require("none-ls.formatting.ruff").with { extra_args = { '--extend-select', 'I' } },
        require("none-ls.formatting.ruff_format"),
        -- formatting.black,
        formatting.gofmt,
        formatting.goimports,
        formatting.prettierd.with({
          extra_args = { "--print-width", "1000000" }, -- Set an extremely large print width to prevent line wrapping
        }),
        -- formatting.prettier.with { filetypes = { 'json', 'yaml', 'markdown' } },
        formatting.shellharden,
        formatting.shfmt,
        formatting.stylua.with({
          extra_args = { "--indent-type", "Spaces", "--indent-width", "2", "--quote-style", "AutoPreferSingle" },
        }),
        -- formatting.markdownlint,
        -- formatting.yamlfmt,

        hover.printenv,
      },

      -- format code on save
      on_attach = function(client, bufnr)
        if client.supports_method("textDocument/formatting") then
          vim.api.nvim_clear_autocmds({
            group = augroup,
            buffer = bufnr,
          })
          vim.api.nvim_create_autocmd("BufWritePre", {
            group = augroup,
            buffer = bufnr,
            callback = function()
              vim.lsp.buf.format({
                bufnr = bufnr,
                filter = function(client)
                  return client.name == "null-ls"
                end,
              })
            end,
          })
        end
      end,
    })
  end,
}
