#!/bin/bash

handle() {
  case $1 in
    windowtitle*)
      # Extract the window ID from the line
      window_id=${1#*>>}

      # Fetch the list of windows and parse it using jq to find the window by its decimal ID
      window_info=$(hyprctl clients -j | jq --arg id "0x$window_id" '.[] | select(.address == ($id))')

      # Extract the title from the window info
      window_title=$(echo "$window_info" | jq '.title')

      # Check if the title matches the characteristics of the Bitwarden popup window
      if [[ "$window_title" == *"Extension: (Bitwarden Password Manager) - Bitwarden â€” Mozilla Firefox"* ]]; then
        hyprctl --batch "dispatch togglefloating address:0x$window_id ; dispatch resizewindowpixel exact 20% 40%,address:0x$window_id ; dispatch movewindowpixel exact 40% 30%,address:0x$window_id"
      fi
      ;;
    monitorremoved*)
      # Extract monitor name from the event
      monitor_name=${1#*>>}
      
      # Create a lock file to prevent concurrent profile changes
      lockfile="/tmp/hypr_profile_change.lock"
      if [ -f "$lockfile" ]; then
        echo "Profile change already in progress, skipping monitor removal handling"
        exit 0
      fi
      
      touch "$lockfile"
      trap "rm -f $lockfile" EXIT
      
      # Give a small delay to let the monitor removal settle and avoid race conditions
      sleep 1
      
      # Check if we're currently in a docked profile and switch to undocked
      current_profile=$(hypr_reload.py -s 2>/dev/null | grep "ACTIVE" | awk '{print $1}')
      
      # If current profile contains "docked" but not "undocked", switch to undocked
      if [[ "$current_profile" == *"docked"* && "$current_profile" != "undocked" ]]; then
        echo "Monitor $monitor_name removed, switching from $current_profile to undocked profile"
        hypr_reload.py -p undocked
      else
        # Even if no profile is active, try to switch to undocked as a safety measure
        # Check if only internal monitor is available
        available_monitors=$(hyprctl monitors -j 2>/dev/null | jq -r '.[].name' 2>/dev/null || echo "")
        if [[ "$available_monitors" == "eDP-1" ]] || [[ $(echo "$available_monitors" | wc -l) -eq 1 ]]; then
          echo "Only internal monitor detected after $monitor_name removal, switching to undocked profile"
          hypr_reload.py -p undocked
        fi
      fi
      
      rm -f "$lockfile"
      ;;
  esac
}

# Listen to the Hyprland socket for events and process each line with the handle function
socat -U - UNIX-CONNECT:"$XDG_RUNTIME_DIR/hypr/$HYPRLAND_INSTANCE_SIGNATURE/.socket2.sock" | while read -r line; do handle "$line"; done
